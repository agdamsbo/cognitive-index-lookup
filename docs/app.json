[{"name":"server.R","content":"\n\nserver <- function(input, output, session) {\n  # require(cognitive.index.lookup)\n  # list.files(here::here(\"R\"),full.names = TRUE) |> lapply(source)\n  # source(here::here(\"R/index_from_raw.R\"))\n  # source(here::here(\"R/plot_index.R\"))\n  # source(here::here(\"R/read_file.R\"))\n  # index_table <- read.csv(here::here(\"data-raw/index_table.csv\"))\n\n  library(tidyr)\n  library(patchwork)\n  library(ggplot2)\n  library(dplyr)\n  library(tidyselect)\n  library(openxlsx2)\n  library(readr)\n  library(purrr)\n\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/read_file.R\")\n  source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/app/functions.R\")\n  index_table <- read.csv(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/data-raw/index_table.csv\")\n\n  # To allow shinylive running, functions are directly sourced:\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n\n  # source(here::here(\"R/index_from_raw.R\"))\n  # source(here::here(\"R/plot_index.R\"))\n\n\n  dat <- shiny::reactive({\n    data.frame(\n      \"id\" = \"1\",\n      \"ab\" = input$ab,\n      \"age\" = input$age,\n      \"imm\" = input$rs1,\n      \"vis\" = input$rs2,\n      \"ver\" = input$rs3,\n      \"att\" = input$rs4,\n      \"del\" = input$rs5,\n      stringsAsFactors = FALSE\n    )\n  })\n\n  dat_u <- shiny::reactive({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, head of that data file by default,\n    # or all rows if selected, will be shown.\n\n\n    shiny::req(input$file1)\n\n    # read.csv(input$file1$datapath,\n    #                header = input$header,\n    #                sep = input$sep,\n    #                quote = input$quote\n    # )\n    read_input(input$file1$datapath)\n  })\n\n  output$id_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"id_col\",\n      selected = \"id\",\n      label = \"ID column\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n  output$ab_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"ab_col\",\n      selected = \"ab\",\n      label = \"Version column\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n  output$age_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"age_col\",\n      selected = \"age\",\n      label = \"Age column\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n  output$imm_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"imm_col\",\n      selected = \"imm\",\n      label = \"Immediate memory\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n\n  output$vis_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"vis_col\",\n      selected = \"vis\",\n      label = \"Visuospatial functions\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n\n  output$ver_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"ver_col\",\n      selected = \"ver\",\n      label = \"Verbal functions\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n\n  output$att_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"att_col\",\n      selected = \"att\",\n      label = \"Attention\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n\n  output$del_sel <- shiny::renderUI({\n    varSelectInput(\n      inputId = \"del_col\",\n      selected = \"del\",\n      label = \"Delayed memory\",\n      data = dat_u(),\n      multiple = FALSE\n    )\n  })\n\n  dat_f <- shiny::reactive({\n    if (input$type == 1) {\n      dat()\n    } else if (input$type == 2) {\n      \n\n      dat <- dat_u()\n      cols <- list(\n        input$id_col,\n        input$ab_col,\n        input$age_col,\n        input$imm_col,\n        input$vis_col,\n        input$ver_col,\n        input$att_col,\n        input$del_col\n      )\n      \n      \n      if (any(is.null(cols)) | any(!(cols %in% names(dat)))) {\n        return()\n      }\n      # browser()\n      cols |> \n        purrr::map(\\(.x) eval(.x,dat))  |> \n        dplyr::bind_cols(.name_repair = \"unique_quiet\")|> \n        stats::setNames(c(\"id\",\"ab\",\"age\",\"imm\", \"vis\", \"ver\", \"att\", \"del\"))\n      # dat |> dplyr::select(purrr::reduce(,c))\n    }\n  })\n\n  v <- shiny::reactiveValues(\n    index = NULL\n  )\n  \n  shiny::observeEvent({input$load}, {\n    # if (input$type == 1)\n    \n    v$index <- dat_f() |> index_from_raw(\n        indx = index_table,\n        version.col = \"ab\",\n        age.col = \"age\",\n        raw_columns = c(\"imm\", \"vis\", \"ver\", \"att\", \"del\")\n      )\n    \n      output$ndx.tbl <- shiny::renderTable({\n        v$index |>\n      dplyr::select(\"id\", \"ab\", dplyr::contains(\"_is\")) |>\n      setNames(c(\"ID\", \"ab\", \"imm\", \"vis\", \"ver\", \"att\", \"del\", \"Total\"))\n  })\n\n  output$per.tbl <- shiny::renderTable({\n    v$index |>\n      dplyr::select(\"id\", \"ab\", dplyr::contains(\"_per\")) |>\n      setNames(c(\"ID\", \"ab\", \"imm\", \"vis\", \"ver\", \"att\", \"del\", \"Total\"))\n  })\n\n\n  output$ndx.plt <- shiny::renderPlot({\n    v$index |> plot_index(sub_plot = \"_is\", facet.by = \"ab\",plot.ci=input$ci)\n  })\n\n  output$per.plt <- shiny::renderPlot({\n    v$index |> plot_index(sub_plot = \"_per\", facet.by = \"ab\")\n  })\n    \n  })\n  \n  # Downloadable csv of selected dataset ----\n  output$downloadData <- shiny::downloadHandler(\n    filename = \"index_lookup.csv\",\n    content = function(file) {\n      write.csv(v$index, file, row.names = FALSE)\n    }\n  )\n}\n\n\n","type":"text"},{"name":"ui.R","content":"require(shiny)\nrequire(bslib)\n# require(ggplot2)\n# source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n# source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n# source(here::here(\"R/index_from_raw.R\"))\n# source(here::here(\"R/plot_index.R\"))\n\n# ui <- fluidPage(\n\ncards <- list(\n  bslib::card(max_height = \"200px\",\n    full_screen = TRUE,\n    bslib::card_header(\"Index Scores table\"),\n    shiny::uiOutput(\"ndx.tbl\")\n  ),\n  bslib::card(max_height = \"200px\",\n    full_screen = TRUE,\n    bslib::card_header(\"Percentiles table\"),\n    shiny::uiOutput(\"per.tbl\")\n  ),\n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Index Scores plot\"),\n    shiny::plotOutput(\"ndx.plt\")\n  ),\n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Percentiles plot\"),\n    shiny::plotOutput(\"per.plt\")\n  )\n)\n\n\nui <- bslib::page_navbar(\n  theme = bslib::bs_theme(bootswatch = \"minty\"),\n  title = \"Calculating cognitive index scores in multidimensional testing.\",\n  window_title = \"Cognitive test index calculator\",\n  header=h6(\"Please note this calculator is only meant as a proof of concept for educational purposes,\n     and the author will take no responsibility for the results of the calculator.\n     Uploaded data is not kept, but please, do not upload any sensitive data.\"),\n  \n\n  ## -----------------------------------------------------------------------------\n  ## Side panel\n  ## -----------------------------------------------------------------------------\n\n  # sidebarPanel(\n  sidebar = bslib::sidebar(\n    open = \"open\",\n    h4(\"Test results\"),\n    radioButtons(\n      inputId = \"type\",\n      label = \"Data type\",\n      inline = FALSE,\n      choiceNames = c(\n        \"Single entry\",\n        \"File upload\"\n      ),\n      choiceValues = c(1, 2)\n    ),\n\n    tags$hr(),\n    radioButtons(\n      inputId = \"ci\",\n      label = \"Plot 95% confidence intervals\",\n      inline = FALSE,\n      choiceNames = c(\n        \"No\",\n        \"Yes\"\n      ),\n      choiceValues = c(FALSE, TRUE)\n    ),\n    tags$hr(),\n\n    ## -----------------------------------------------------------------------------\n    ## Single entry\n    ## -----------------------------------------------------------------------------\n\n    conditionalPanel(\n      condition = \"input.type==1\",\n      helpText(em(\"Specify relevant data below, and press 'Load data'. Download results at the bottom\")),\n      numericInput(\n        inputId = \"age\",\n        label = \"Age\",\n        value = 60\n      ),\n      radioButtons(\n        inputId = \"ab\",\n        label = \"Test version (A/B)\",\n        inline = FALSE,\n        choiceNames = c(\n          \"A\",\n          \"B\"\n        ),\n        choiceValues = c(\"1\", \"2\")\n      ),\n      numericInput(\n        inputId = \"rs1\",\n        label = \"Immediate memory\",\n        value = 48\n      ),\n      numericInput(\n        inputId = \"rs2\",\n        label = \"Visuospatial functions\",\n        value = 37\n      ),\n      numericInput(\n        inputId = \"rs3\",\n        label = \"Verbal functions\",\n        value = 29\n      ),\n      numericInput(\n        inputId = \"rs4\",\n        label = \"Attention\",\n        value = 52\n      ),\n      numericInput(\n        inputId = \"rs5\",\n        label = \"Delayed memory\",\n        value = 50\n      )\n    ),\n\n    ## -----------------------------------------------------------------------------\n    ## File upload\n    ## -----------------------------------------------------------------------------\n\n    conditionalPanel(\n      condition = \"input.type==2\",\n\n      # Input: Select a file ----\n\n      fileInput(\n        inputId = \"file1\",\n        label = \"Choose CSV File\",\n        multiple = FALSE,\n        accept = c(\n          \"text/csv\",\n          \"text/comma-separated-values,text/plain\",\n          \".csv\",\n          \".xlsx\",\n          \".xls\"\n        )\n      ),\n      helpText(em(\"Please specify relevant columns from your data, and press 'Load data'\")),\n      uiOutput(\"id_sel\"),\n      uiOutput(\"ab_sel\"),\n      uiOutput(\"age_sel\"),\n      uiOutput(\"imm_sel\"),\n      uiOutput(\"vis_sel\"),\n      uiOutput(\"ver_sel\"),\n      uiOutput(\"att_sel\"),\n      uiOutput(\"del_sel\")\n      # Horizontal line ----\n      # tags$hr(),\n\n      # Input: Checkbox if file has header ----\n      # checkboxInput(\"header\", \"Header\", TRUE),\n\n      # Input: Select separator ----\n      # radioButtons(\"sep\", \"Separator\",\n      #              choices = c(\n      #                Comma = \",\",\n      #                Semicolon = \";\",\n      #                Tab = \"\\t\"\n      #              ),\n      #              selected = \",\"\n      # ),\n\n      # Input: Select quotes ----\n      # radioButtons(\"quote\", \"Quote\",\n      #              choices = c(\n      #                None = \"\",\n      #                \"Double Quote\" = '\"',\n      #                \"Single Quote\" = \"'\"\n      #              ),\n      #              selected = '\"'\n      # ),\n    ),\n    actionButton(\"load\", \"Load data\", class = \"btn-primary\"),\n    # actionButton(\"update\", \"Update output\", class = \"btn-primary\"),\n\n    # Have tried to dunamically subset. Was working, then not. Head scratches..\n\n    ## -----------------------------------------------------------------------------\n    ## Download output\n    ## -----------------------------------------------------------------------------\n\n    # Horizontal line ----\n    tags$hr(),\n    h4(\"Download results\"),\n\n    # Button\n    downloadButton(\"downloadData\", \"Download\")\n  ),\n  layout_columns(\n    cards[[1]], cards[[2]]\n  ),\n  layout_columns(\n    cards[[3]], cards[[4]]\n  )\n  \n\n  # mainPanel(\n  #   tabsetPanel(\n  #\n  #     ## -----------------------------------------------------------------------------\n  #     ## Summary tab\n  #     ## -----------------------------------------------------------------------------\n  #     tabPanel(\n  #       \"Summary\",\n  #       h3(\"Index Scores\"),\n  #       htmlOutput(\"ndx.tbl\", container = span),\n  #       h3(\"Percentiles\"),\n  #       htmlOutput(\"per.tbl\", container = span)\n  #     ),\n  #\n  #     ## -----------------------------------------------------------------------------\n  #     ## Plots tab\n  #     ## -----------------------------------------------------------------------------\n  #\n  #     tabPanel(\n  #       \"Plots\",\n  #       h3(\"Index Scores\"),\n  #       plotOutput(\"ndx.plt\"),\n  #       h3(\"Percentiles\"),\n  #       plotOutput(\"per.plt\")\n  #     )\n  #   )\n  # )\n)\n\n\n\n","type":"text"}]
